/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ibfb.traits.scales;

import java.util.ResourceBundle;
import java.util.Set;
import org.cimmyt.cril.ibwb.api.AppServicesProxy;
import org.cimmyt.cril.ibwb.commongui.DialogUtil;
import org.cimmyt.cril.ibwb.commongui.OntologyTool;
import org.cimmyt.cril.ibwb.domain.Scales;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//ibfb.traits.scales//ScalesEditor//EN",
autostore = false)
@TopComponent.Description(preferredID = "ScalesEditorTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "ibfb.traits.scales.ScalesEditorTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_ScalesEditorAction",
preferredID = "ScalesEditorTopComponent")
public final class ScalesEditorTopComponent extends TopComponent {
    
    private ResourceBundle bundle = NbBundle.getBundle(ScalesEditorTopComponent.class);

    private Scales scales;

    public ScalesEditorTopComponent(Scales scales) {
        this.scales = scales;
        initComponents();
        setName(NbBundle.getMessage(ScalesEditorTopComponent.class, "CTL_ScalesEditorTopComponent") + "(" + this.scales.getScaleid() + ")");
        setToolTipText(NbBundle.getMessage(ScalesEditorTopComponent.class, "HINT_ScalesEditorTopComponent"));
        checkEditingAllowed();
    }

    public ScalesEditorTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(ScalesEditorTopComponent.class, "CTL_ScalesEditorTopComponent"));
        setToolTipText(NbBundle.getMessage(ScalesEditorTopComponent.class, "HINT_ScalesEditorTopComponent"));

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        lblScaleId = new javax.swing.JLabel();
        txtScaleId = new javax.swing.JTextField();
        lblScaleName = new javax.swing.JLabel();
        txtScaleName = new javax.swing.JTextField();
        lblOntology = new javax.swing.JLabel();
        txtOntology = new javax.swing.JTextField();
        btnBrowse = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(lblScaleId, org.openide.util.NbBundle.getMessage(ScalesEditorTopComponent.class, "ScalesEditorTopComponent.lblScaleId.text")); // NOI18N

        txtScaleId.setEditable(false);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${scales.scaleid}"), txtScaleId, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        org.openide.awt.Mnemonics.setLocalizedText(lblScaleName, org.openide.util.NbBundle.getMessage(ScalesEditorTopComponent.class, "ScalesEditorTopComponent.lblScaleName.text")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${scales.scname}"), txtScaleName, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        org.openide.awt.Mnemonics.setLocalizedText(lblOntology, org.openide.util.NbBundle.getMessage(ScalesEditorTopComponent.class, "ScalesEditorTopComponent.lblOntology.text")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${scales.ontology}"), txtOntology, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        btnBrowse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ibfb/traits/scales/browse16.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnBrowse, org.openide.util.NbBundle.getMessage(ScalesEditorTopComponent.class, "ScalesEditorTopComponent.btnBrowse.text")); // NOI18N
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ibfb/traits/core/images/save.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnSave, org.openide.util.NbBundle.getMessage(ScalesEditorTopComponent.class, "ScalesEditorTopComponent.btnSave.text")); // NOI18N
        btnSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSave.setIconTextGap(0);
        btnSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblScaleId)
                            .addComponent(lblScaleName))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtScaleId, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtScaleName, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblOntology)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(txtOntology, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblScaleId)
                    .addComponent(txtScaleId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtScaleName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblScaleName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lblOntology))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtOntology, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnBrowse)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSave)
                .addContainerGap(134, Short.MAX_VALUE))
        );

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed

    OntologyTool.openOntology(this.scales.getOntology());



}//GEN-LAST:event_btnBrowseActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed

        saveOrUpdateRecord();     }//GEN-LAST:event_btnSaveActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowse;
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel lblOntology;
    private javax.swing.JLabel lblScaleId;
    private javax.swing.JLabel lblScaleName;
    private javax.swing.JTextField txtOntology;
    private javax.swing.JTextField txtScaleId;
    private javax.swing.JTextField txtScaleName;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    public Scales getScales() {
        return scales;
    }

    public void setScales(Scales scales) {
        this.scales = scales;
    }

    /**
     * Return current instance of ScalesEditorTopComponent using current Scale object
     * @param scales Scale object to check
     * @return ScalesEditorTopComponent instance if found or null if not found
     */
    public static ScalesEditorTopComponent getScalesEditorTopComponent(Scales scales) {
        ScalesEditorTopComponent scalesEditorTopComponent = null;
        Set<TopComponent> comps = TopComponent.getRegistry().getOpened();
        for (TopComponent tc : comps) {
            if (tc instanceof ScalesEditorTopComponent) {
                ScalesEditorTopComponent setc = (ScalesEditorTopComponent) tc;
                StringBuilder name = new StringBuilder();
                name.append(NbBundle.getMessage(ScalesEditorTopComponent.class, "CTL_ScalesEditorTopComponent"));
                name.append("(").append(scales.getScaleid()).append(")");

                if (setc.getName().equals(name.toString())) {
                    scalesEditorTopComponent = setc;
                    break;
                }
            }
        }
        return scalesEditorTopComponent;
    }

    private void checkEditingAllowed() {
        boolean editingAllowed = true;
        if (this.scales.getScaleid().intValue() > 0) {
            editingAllowed = false;
        }
        txtScaleName.setEditable(editingAllowed);
        /*cboScaleType.setEditable(editingAllowed);
        cboDataType.setEditable(editingAllowed);*/
        txtOntology.setEditable(editingAllowed);
        btnSave.setEnabled(editingAllowed);
        
        /*if (scales.getSctype() != null && scales.getSctype().equals(Scales.SCALE_TYPE_DISCRETE)) {
            cboScaleType.setSelectedIndex(1);
        } else {
            cboScaleType.setSelectedIndex(0);
        }
        
        if (scales.getDtype() != null && scales.getDtype().equals(Scales.DATA_TYPE_CHARACTER)) {
            cboDataType.setSelectedIndex(1);
        } else {
            cboDataType.setSelectedIndex(0);
        }*/

    }

    private void saveOrUpdateRecord() {
        /*switch (cboScaleType.getSelectedIndex()) {
            case 0:
                scales.setSctype(Scales.SCALE_TYPE_CONTINOUS);
                break;
            case 1:
                scales.setSctype(Scales.SCALE_TYPE_DISCRETE);

        }
        
        switch(cboDataType.getSelectedIndex()) {
            case 0: 
                scales.setDtype(Scales.DATA_TYPE_NUMERIC);
                break;
            case 1:
                scales.setDtype(Scales.DATA_TYPE_CHARACTER);
        }*/
        if (scales.getScaleid() == 0) {
            AppServicesProxy.getDefault().appServices().addScalesLocal(scales);
            DialogUtil.displayInfo(bundle.getString("ScalesEditorTopComponent.scaleAdded"));
        } else {
            AppServicesProxy.getDefault().appServices().updateTmsScale(scales);
            DialogUtil.displayInfo(bundle.getString("ScalesEditorTopComponent.scaleUpdated"));
        }
    }
}
